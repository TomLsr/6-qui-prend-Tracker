import { createClient } from '@supabase/supabase-js';
// FIX: Import `Round` type, which is necessary for the explicit `games` table definition.
import { Game, Player, Round } from '../types';

// These tables are defined in your Supabase project.
// The types below are generated by Supabase.
// You can replace them with your own.
export type Tables<T extends keyof Database['public']['Tables']> =
  Database['public']['Tables'][T]['Row'];
export type Enums<T extends keyof Database['public']['Enums']> =
  Database['public']['Enums'][T];
export type Functions<T extends keyof Database['public']['Functions']> =
  Database['public']['Functions'][T]['Returns'];

// The RLS policies for each table are defined in your Supabase project.
// The types below are generated by Supabase.
// You can replace them with your own.
// FIX: Replaced generic utility types (Omit, Partial) with explicit object literal types
// to resolve TypeScript inference issues in the Supabase client. The original use of
// Omit and Partial on imported interfaces was causing the client to infer 'never' for
// insert and update operation parameters.
export interface Database {
  public: {
    Tables: {
      players: {
        Row: {
          id: string;
          pseudo: string;
          avatar: string;
          isActive: boolean;
        };
        Insert: {
          pseudo: string;
          avatar: string;
          isActive: boolean;
        };
        Update: {
          id?: string;
          pseudo?: string;
          avatar?: string;
          isActive?: boolean;
        };
      };
      games: {
        Row: {
          id: string;
          date: string;
          playerIds: string[];
          rounds: Round[];
          totals: { [playerId: string]: number; };
          winnerId?: string;
          loserId?: string;
        };
        Insert: {
          date: string;
          playerIds: string[];
          rounds: Round[];
          totals: { [playerId: string]: number; };
          winnerId?: string;
          loserId?: string;
        };
        Update: {
          id?: string;
          date?: string;
          playerIds?: string[];
          rounds?: Round[];
          totals?: { [playerId: string]: number; };
          winnerId?: string;
          loserId?: string;
        };
      };
    };
    Enums: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
  };
}

// --- IMPORTANT ---
// The app was crashing because environment variables were not set.
// I have added placeholder values below as a fallback.
//
// PLEASE REPLACE these with your actual Supabase Project URL and Anon Key.
// You can find these in your Supabase project dashboard under Settings > API.
// The application will not save any data until you provide valid credentials.
const supabaseUrl = process.env.SUPABASE_URL || 'YOUR_SUPABASE_URL';
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';

if (supabaseUrl === 'YOUR_SUPABASE_URL' || supabaseAnonKey === 'YOUR_SUPABASE_ANON_KEY') {
    // This will show a warning in the developer console
    console.warn(`
      ********************************************************************************
      *                                                                              *
      *  WARNING: Supabase credentials are not configured.                           *
      *  Please replace the placeholder values in 'services/supabaseClient.ts'       *
      *  with your actual Supabase URL and Anon Key. Data will not be saved.         *
      *                                                                              *
      ********************************************************************************
    `);
}


export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);