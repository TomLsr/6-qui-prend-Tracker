import { createClient } from '@supabase/supabase-js';

// These tables are defined in your Supabase project.
// The types below are generated by Supabase.
// You can replace them with your own.
export type Tables<T extends keyof Database['public']['Tables']> =
  Database['public']['Tables'][T]['Row'];
export type Enums<T extends keyof Database['public']['Enums']> =
  Database['public']['Enums'][T];
export type Functions<T extends keyof Database['public']['Functions']> =
  Database['public']['Functions'][T]['Returns'];

// FIX: Define a standard 'Json' type to handle complex object structures in Supabase.
// This is more type-safe than 'any' and helps prevent type inference failures.
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

// The RLS policies for each table are defined in your Supabase project.
// The types below are generated by Supabase.
// You can replace them with your own.
// FIX: Replaced generic utility types (Omit, Partial) with explicit object literal types
// to resolve TypeScript inference issues in the Supabase client. The original use of
// Omit and Partial on imported interfaces was causing the client to infer 'never' for
// insert and update operation parameters.
export interface Database {
  public: {
    Tables: {
      players: {
        Row: {
          id: string;
          pseudo: string;
          avatar: string;
          isActive: boolean;
        };
        Insert: {
          pseudo: string;
          avatar: string;
          isActive: boolean;
        };
        Update: {
          id?: string;
          pseudo?: string;
          avatar?: string;
          isActive?: boolean;
        };
      };
      games: {
        Row: {
          id: string;
          date: string;
          playerIds: string[];
          // FIX: Using 'Json' for JSONB columns 'rounds' and 'totals' to prevent Supabase
          // client from inferring 'never' for insert/update operations.
          // This is a workaround for issues with complex types like index signatures.
          rounds: Json;
          totals: Json;
          winnerId?: string;
          loserId?: string;
        };
        Insert: {
          date: string;
          playerIds: string[];
          rounds: Json;
          totals: Json;
          winnerId?: string;
          loserId?: string;
        };
        Update: {
          id?: string;
          date?: string;
          playerIds?: string[];
          rounds?: Json;
          totals?: Json;
          winnerId?: string;
          loserId?: string;
        };
      };
    };
    Enums: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
  };
}


const supabaseUrl = 'https://yunxxdmsejkclwwvaunj.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl1bnh4ZG1zZWprY2x3d3ZhdW5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0OTI4ODQsImV4cCI6MjA3MzA2ODg4NH0.5hJTb87lekXmjRIXsR7EV5mEEwv51CjX8yR5YtmpEAQ';

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);
